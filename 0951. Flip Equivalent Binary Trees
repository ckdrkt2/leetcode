```python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def flipEquiv(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:
        def DFS(node1, node2):
            if not node1 and not node2:
                return True
            if not node1 or not node2 or node1.val != node2.val:
                return False
            return DFS(node1.left, node2.left) and DFS(node1.right, node2.right) \
                or DFS(node1.left, node2.right) and DFS(node1.right, node2.left)
        return DFS(root1, root2)
```

time complexity: O(min(N,M))
space complexity: O(min(N,M))

DFS를 이용한 풀이입니다.
DFS를 사용한 이유는 문제의 조건을 만족하기 위해서는 각각의 서브 트리의 구성이 같아야 한다는 점을 활용하기 위해서입니다.
문제에 조건을 만족하기 위해서는 트리 하위 노드들의 위치는 달라고 각각의 서브트리에 대한 구성은 같아야 합니다.
따라서 이를 확인하기 위한 방법으로 DFS를 사용합니다.
총 3가지 비교를 진행하는데, 먼저 두 노드가 비어있는 경우입니다. 이런 경우에는 상위 노드들이 이후에 나오는 비교를 모두 만족했기 때문에
리프 노드에 도달하게 될 수 있던 것이기 떄문에 True를 반환합니다.
다음은 두 노드 중 하나만 비어있는 경우입니다. 이러한 경우에는 다르기 때문에 False를 반환합니다. 또한 둘 다 있더라도 값이 다른 경우에도 마찬가지로 False를 반환합니다.
이와 같은 과정을 거치게 되면, 비교하는 노드에 값이 있고 값이 같은 경우에는 비교 연산을 통과하게 됩니다. 결과적으로 조건을 만족하는 노드들을 통과하여 리프 노드에 도달하게 되고,
리프 노드에서의 자식 노드들은 모두 비어있는 노드이기 때문에 True 반환을 통해서 깊이 탐색을 진행한 경로의 모든 노드가 조건을 만족한다는 의미가 되기 때문에 결과적으로 트리를 비교할 수 있게 됩니다.

마지막으로 모든 조건을 패스하게 되면 4가지 케이스에 대한 비교 결과를 반환합니다. 자식 노드들이 조건을 만족하기 위해서는 왼쪽, 오른쪽 끼리 같거나 교차되어서 같아야 하기 때문에 
이러한 조건을 비교하기 위해 마지막 반환에 케이스 비교를 추가합니다. 결과적으로 두 트리 중에 더 작은 트리의 만큼의 리소스를 사용하여 문제를 해결합니다.
